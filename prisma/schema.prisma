generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model billingInformationEntries {
  id                       Int       @id(map: "billinginformationentries_pk") @default(autoincrement())
  userId                   Int
  name                     String    @db.VarChar(255)
  address1                 String    @db.VarChar(255)
  address2                 String?   @db.VarChar(255)
  city                     String    @db.VarChar(255)
  region                   String    @db.VarChar(255)
  postalCode               String    @db.VarChar(255)
  country                  String    @db.VarChar(255)
  paymentMethod            String    @db.VarChar(100)
  cclast4                  String    @db.VarChar(4)
  createdAt                DateTime? @db.Timestamp(6)
  updatedAt                DateTime? @db.Timestamp(6)
  customerProfileId        String?   @unique(map: "billinginformationentries_customerprofileid_uindex") @db.VarChar(100)
  customerPaymentProfileId String?   @db.VarChar(100)
  users                    users     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "billinginformationentries_users_id_fk")

  @@index([userId], map: "billingInformationEntriesUserIdForeign")
  @@index([createdAt(sort: Desc)], map: "billinginformationentries_createdat_index")
  @@index([updatedAt(sort: Desc)], map: "billinginformationentries_updatedat_index")
  @@index([customerPaymentProfileId], map: "billinginformationentries_customerpaymentprofileid_index")
}

model blockedUsers {
  id                                      Int       @id(map: "blockedusers_pk") @default(autoincrement())
  userId                                  Int
  blockedUserId                           Int
  createdAt                               DateTime? @db.Timestamp(6)
  updatedAt                               DateTime? @db.Timestamp(6)
  users_blockedUsers_userIdTousers        users     @relation("blockedUsers_userIdTousers", fields: [userId], references: [id], onDelete: Cascade, map: "blockedusers_users_id_fk")
  users_blockedUsers_blockedUserIdTousers users     @relation("blockedUsers_blockedUserIdTousers", fields: [blockedUserId], references: [id], onDelete: Cascade, map: "blockedusers_users_id_fk_2")

  @@unique([userId, blockedUserId], map: "blockedusers_userid_blockeduserid_uindex")
  @@index([createdAt(sort: Desc)], map: "blockedusers_createdat_index")
  @@index([updatedAt(sort: Desc)], map: "blockedusers_updatedat_index")
  @@index([blockedUserId], map: "blockedUsersBlockedUserIdForeign")
  @@index([userId], map: "blockedUsersUserIdForeign")
}

model userReports {
  id             Int      @id @default(autoincrement())
  userId         Int
  reportedUserId Int
  reportContent  String
  status         String   @default("pending") @db.VarChar(50)
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime @default(now()) @db.Timestamptz(6)
  reportedUser   users    @relation("reportedUsers", fields: [reportedUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user           users    @relation("userReports", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, reportedUserId], map: "idx_userReports_unique_user_report")
  @@index([reportedUserId], map: "idx_userReports_reportedUserId")
  @@index([status], map: "idx_userReports_status")
  @@index([userId], map: "idx_userReports_userId")
}

model cachedLocations {
  id            Int       @id(map: "cachedlocations_pk") @default(autoincrement())
  formattedName String    @db.VarChar(255)
  area          String?   @db.VarChar(255)
  city          String    @db.VarChar(255)
  region        String?   @db.VarChar(255)
  country       String?   @db.VarChar(255)
  googlePlaceId String    @db.VarChar(255)
  latitude      Float
  longitude     Float
  viewport      Json
  createdAt     DateTime? @db.Timestamp(6)
  updatedAt     DateTime? @db.Timestamp(6)

  @@index([createdAt(sort: Desc)], map: "cachedlocations_createdat_index")
  @@index([updatedAt(sort: Desc)], map: "cachedlocations_updatedat_index")
}

model messages {
  id                Int          @id(map: "messages_pk") @default(autoincrement())
  matchId           Int?
  content           String?
  readAt            DateTime?    @db.Timestamp(6)
  notificationAckAt DateTime?    @db.Timestamp(6)
  userId            Int
  recipientId       Int
  timestamp         BigInt       @default(0)
  createdAt         DateTime?    @db.Timestamp(6)
  updatedAt         DateTime?    @db.Timestamp(6)
  userMatches       userMatches? @relation(fields: [matchId], references: [id], onDelete: Cascade, map: "messages_usermatches_id_fk")
  users             users        @relation(fields: [userId], references: [id], onDelete: Cascade, map: "messages_users_id_fk")

  @@index([createdAt], map: "messagesCreatedAtIndex")
  @@index([matchId], map: "messagesMatchIdForeign")
  @@index([recipientId], map: "messagesRecipientIdForeign")
  @@index([userId], map: "messagesUserIdForeign")
  @@index([createdAt(sort: Desc)], map: "messages_createdat_index")
  @@index([updatedAt(sort: Desc)], map: "messages_updatedat_index")
}

model mutedUsers {
  id                                  Int       @id(map: "mutedusers_pk") @default(autoincrement())
  userId                              Int
  recipientId                         Int
  createdAt                           DateTime? @db.Timestamp(6)
  updatedAt                           DateTime? @db.Timestamp(6)
  users_mutedUsers_userIdTousers      users     @relation("mutedUsers_userIdTousers", fields: [userId], references: [id], onDelete: Cascade, map: "mutedusers_users_id_fk")
  users_mutedUsers_recipientIdTousers users     @relation("mutedUsers_recipientIdTousers", fields: [recipientId], references: [id], onDelete: Cascade, map: "mutedusers_users_id_fk_2")

  @@unique([userId, recipientId], map: "mutedusers_userid_recipientid_uindex")
  @@index([recipientId], map: "mutedUsersRecipientIdForeign")
  @@index([userId], map: "mutedUsersUserIdForeign")
  @@index([createdAt(sort: Desc)], map: "mutedusers_createdat_index")
  @@index([updatedAt(sort: Desc)], map: "mutedusers_updatedat_index")
}

model notifications {
  id                                     Int       @id(map: "notifications_pk") @default(autoincrement())
  userId                                 Int
  recipientId                            Int?
  type                                   String    @db.VarChar(255)
  readAt                                 DateTime? @db.Timestamp(6)
  data                                   Json?
  createdAt                              DateTime? @db.Timestamp(6)
  updatedAt                              DateTime? @db.Timestamp(6)
  users_notifications_recipientIdTousers users?    @relation("notifications_recipientIdTousers", fields: [recipientId], references: [id], onDelete: Cascade, map: "notifications_users_id_fk")
  users_notifications_userIdTousers      users     @relation("notifications_userIdTousers", fields: [userId], references: [id], onDelete: Cascade, map: "notifications_users_id_fk_2")

  @@index([recipientId], map: "notificationsRecipientIdForeign")
  @@index([userId], map: "notificationsUserIdForeign")
  @@index([createdAt(sort: Desc)], map: "notifications_createdat_index")
  @@index([updatedAt(sort: Desc)], map: "notifications_updatedat_index")
}

model regionViewports {
  id        Int       @id(map: "regionviewports_pk") @default(autoincrement())
  name      String    @db.VarChar(255)
  isState   Boolean
  viewport  Json
  createdAt DateTime? @db.Timestamp(6)
  updatedAt DateTime? @db.Timestamp(6)

  @@index([createdAt(sort: Desc)], map: "regionviewports_createdat_index")
  @@index([updatedAt(sort: Desc)], map: "regionviewports_updatedat_index")
}

model sessions {
  id           String  @id(map: "sessions_pk") @db.VarChar(255)
  userId       Int?
  ipAddress    String? @db.VarChar(45)
  userAgent    String?
  payload      String
  lastActivity Int
  users        users?  @relation(fields: [userId], references: [id], onDelete: Cascade, map: "sessions_users_id_fk")

  @@index([lastActivity], map: "sessionsLastActivityIndex")
  @@index([userId], map: "sessionsUserIdIndex")
}

model subscriptionPlanEnrollments {
  id                 Int               @id(map: "subscriptionplanenrollments_pk") @default(autoincrement())
  userId             Int
  subscriptionPlanId Int
  lastPaymentAt      DateTime?         @db.Timestamp(6)
  nextPaymentAt      DateTime?         @db.Timestamp(6)
  startedAt          DateTime?         @db.Timestamp(6)
  endsAt             DateTime?         @db.Timestamp(6)
  createdAt          DateTime?         @db.Timestamp(6)
  updatedAt          DateTime?         @db.Timestamp(6)
  price              Float?            @default(0)
  chargeInterval     String?           @default("monthly") @db.VarChar(50)
  priceUnit          String?           @default("USD") @db.VarChar(20)
  lastEvalAt         DateTime?         @db.Timestamp(6)
  billingHolds       billingHolds[]
  subscriptionPlans  subscriptionPlans @relation(fields: [subscriptionPlanId], references: [id], onDelete: Cascade, map: "subscriptionplanenrollments_subscriptionplans_id_fk")
  users              users             @relation(fields: [userId], references: [id], onDelete: Cascade, map: "subscriptionplanenrollments_users_id_fk")

  @@index([subscriptionPlanId], map: "subscriptionPlanEnrollmentsSubscriptionPlanIdForeign")
  @@index([userId], map: "subscriptionPlanEnrollmentsUserIdForeign")
  @@index([createdAt(sort: Desc)], map: "subscriptionplanenrollments_createdat_index")
  @@index([updatedAt(sort: Desc)], map: "subscriptionplanenrollments_updatedat_index")
  @@index([lastEvalAt], map: "subscriptionplanenrollments_lastevalat_index")
}

model subscriptionPlans {
  id                          Int                           @id(map: "subscriptionplans_pk") @default(autoincrement())
  name                        String                        @db.VarChar(255)
  description                 String
  createdAt                   DateTime?                     @db.Timestamp(6)
  updatedAt                   DateTime?                     @db.Timestamp(6)
  listPrice                   Float?                        @default(0)
  listPriceUnit               String?                       @default("USD") @db.VarChar(20)
  subscriptionPlanEnrollments subscriptionPlanEnrollments[]

  @@index([createdAt(sort: Desc)], map: "subscriptionplans_createdat_index")
  @@index([updatedAt(sort: Desc)], map: "subscriptionplans_updatedat_index")
}

model userMatches {
  id                                   Int        @id(map: "usermatches_pk") @default(autoincrement())
  userId                               Int
  recipientId                          Int
  status                               String     @db.VarChar(255)
  acceptedAt                           DateTime?  @db.Timestamp(6)
  acknowledgedAt                       DateTime?  @db.Timestamp(6)
  updatedAtTimestamp                   BigInt?    @default(0)
  createdAt                            DateTime?  @db.Timestamp(6)
  updatedAt                            DateTime?  @db.Timestamp(6)
  messages                             messages[]
  users_userMatches_userIdTousers      users      @relation("userMatches_userIdTousers", fields: [userId], references: [id], onDelete: Cascade, map: "usermatches_users_id_fk")
  users_userMatches_recipientIdTousers users      @relation("userMatches_recipientIdTousers", fields: [recipientId], references: [id], onDelete: Cascade, map: "usermatches_users_id_fk_2")

  @@unique([userId, recipientId], map: "usermatches_userid_recipientid_uindex")
  @@index([recipientId], map: "matchesRecipientIdForeign")
  @@index([updatedAtTimestamp], map: "matchesUpdatedAtTimestampIndex")
  @@index([userId], map: "matchesUserIdForeign")
  @@index([createdAt(sort: Desc)], map: "usermatches_createdat_index")
  @@index([updatedAt(sort: Desc)], map: "usermatches_updatedat_index")
}

model users {
  id                                             Int                           @id(map: "users_pk") @default(autoincrement())
  displayName                                    String                        @db.VarChar(255)
  firstName                                      String                        @db.VarChar(255)
  lastName                                       String                        @db.VarChar(255)
  gender                                         String                        @db.VarChar(50)
  smoking                                        String?                       @db.VarChar(100)
  drinking                                       String?                       @db.VarChar(100)
  wantsChildren                                  String?                       @db.VarChar(100)
  education                                      String?                       @db.VarChar(100)
  hasChildren                                    String?                       @db.VarChar(100)
  dateOfBirth                                    DateTime                      @db.Timestamp(6)
  lastActiveAt                                   DateTime?                     @db.Timestamp(6)
  suspendedAt                                    DateTime?                     @db.Timestamp(6)
  isUnderReview                                  Int?                          @default(0) @db.SmallInt
  emailVerifiedAt                                DateTime?                     @db.Timestamp(6)
  suspendedReason                                String?
  bio                                            String?
  email                                          String                        @unique(map: "usersEmailUnique") @db.VarChar(255)
  height                                         Int?
  maritalStatus                                  String?                       @db.VarChar(100)
  photos                                         Json?
  numOfPhotos                                    Int                           @default(0)
  mainPhoto                                      String?                       @db.VarChar(255)
  interests                                      Json?
  country                                        String?                       @db.VarChar(200)
  locationName                                   String?                       @db.VarChar(250)
  locationViewport                               Json?
  latitude                                       Float?
  longitude                                      Float?
  seekingDistanceOrigin                          String?                       @db.VarChar(100)
  bodyType                                       String?                       @db.VarChar(100)
  timezone                                       String?                       @default("UTC") @db.VarChar(100)
  seekingMinHeight                               Int                           @default(0)
  seekingMaxHeight                               Int                           @default(0)
  seekingMinAge                                  Int                           @default(0)
  seekingMaxAge                                  Int                           @default(0)
  seekingNumOfPhotos                             Int                           @default(0)
  seekingMaxDistance                             Int                           @default(0)
  ethnicities                                    Json?
  languages                                      Json?
  religions                                      Json?
  ethnicPreferences                              Json?
  religiousPreferences                           Json?
  educationPreferences                           Json?
  bodyTypePreferences                            Json?
  drinkingPreferences                            Json?
  smokingPreferences                             Json?
  hasChildrenPreferences                         Json?
  wantsChildrenPreferences                       Json?
  interestPreferences                            Json?
  languagePreferences                            Json?
  maritalStatusPreferences                       Json?
  seekingCountries                               Json?
  singleSearchLocation                           Json?
  paymentProfileId                               String?                       @db.VarChar(255)
  customerPaymentProfileId                       String?                       @db.VarChar(255)
  password                                       String                        @db.VarChar(500)
  refreshToken                                   String?                       @db.VarChar(500)
  createdAt                                      DateTime?                     @db.Timestamp(6)
  updatedAt                                      DateTime?                     @db.Timestamp(6)
  seekingGender                                  String?                       @db.VarChar(20)
  geoPoint                                       Unsupported("geography")?
  deactivatedAt                                  DateTime?                     @db.Timestamp(6)
  hideOnlineStatus                               Boolean                       @default(false)
  resetToken                                     String?                       @db.VarChar(255)
  resetTokenExpiry                               DateTime?                     @db.Timestamp(6)
  newDesiredEmail                                String?                       @db.VarChar(255)
  emailVerificationToken                         String?                       @unique(map: "users_emailverificationtoken_uindex") @db.VarChar(75)
  emailVerificationTokenExpiry                   DateTime?                     @db.Timestamp(6)
  passwordResetToken                             String?                       @db.VarChar(255)
  passwordResetTokenExpiry                       DateTime?                     @db.Timestamp(6)
  profileCompletedAt                             DateTime?                     @db.Timestamp(6)
  currentOnboardingSteps                         Json?
  billingHolds                                   billingHolds[]
  billingInformationEntries                      billingInformationEntries[]
  blockedUsers_blockedUsers_userIdTousers        blockedUsers[]                @relation("blockedUsers_userIdTousers")
  blockedUsers_blockedUsers_blockedUserIdTousers blockedUsers[]                @relation("blockedUsers_blockedUserIdTousers")
  messages                                       messages[]
  mutedUsers_mutedUsers_userIdTousers            mutedUsers[]                  @relation("mutedUsers_userIdTousers")
  mutedUsers_mutedUsers_recipientIdTousers       mutedUsers[]                  @relation("mutedUsers_recipientIdTousers")
  notifications_notifications_recipientIdTousers notifications[]               @relation("notifications_recipientIdTousers")
  notifications_notifications_userIdTousers      notifications[]               @relation("notifications_userIdTousers")
  paymentTransactions                            paymentTransactions[]
  sessions                                       sessions[]
  subscriptionPlanEnrollments                    subscriptionPlanEnrollments[]
  userMatches_userMatches_userIdTousers          userMatches[]                 @relation("userMatches_userIdTousers")
  userMatches_userMatches_recipientIdTousers     userMatches[]                 @relation("userMatches_recipientIdTousers")
  userReports_userReports_reportedUserIdTousers  userReports[]                 @relation("reportedUsers")
  userReports_userReports_userIdTousers          userReports[]                 @relation("userReports")

  @@index([createdAt(sort: Desc)], map: "users_createdat_index")
  @@index([updatedAt(sort: Desc)], map: "users_updatedat_index")
  @@index([profileCompletedAt], map: "users_profilecompletedat_index")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

model paymentTransactions {
  id            Int       @id(map: "paymenttransactions_pk") @default(autoincrement())
  userId        Int?
  amount        Float?    @default(0)
  transId       String?   @db.VarChar(100)
  accountNumber String?   @db.VarChar(100)
  updatedAt     DateTime? @db.Timestamp(6)
  createdAt     DateTime? @db.Timestamp(6)
  status        String?   @db.VarChar(100)
  description   String?   @db.VarChar(200)
  errors        Json?
  apiResponse   Json?
  users         users?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "paymenttransactions_users_id_fk")

  @@index([userId], map: "paymenttransactions_userid_index")
  @@index([transId], map: "paymenttransactions_transid_index")
}

model billingHolds {
  id                          Int                         @id @default(autoincrement())
  userId                      Int
  enrollmentId                Int
  reason                      String
  responseCode                String?                     @db.VarChar(10)
  amount                      Float?
  planName                    String?                     @db.VarChar(255)
  createdAt                   DateTime?                   @default(now()) @db.Timestamp(6)
  updatedAt                   DateTime?                   @default(now()) @db.Timestamp(6)
  resolvedAt                  DateTime?                   @db.Timestamp(6)
  status                      String?                     @default("pending") @db.VarChar(20)
  subscriptionPlanEnrollments subscriptionPlanEnrollments @relation(fields: [enrollmentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "billingHolds_subscriptionPlanEnrollments_id_fk")
  users                       users                       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "billingHolds_users_id_fk")
}

model countries {
  id             Int      @id
  name           String   @db.VarChar(255)
  iso3           String?  @db.VarChar(3)
  iso2           String?  @unique(map: "countries_iso2_uindex") @db.VarChar(2)
  numericCode    String?  @db.VarChar(3)
  phoneCode      String?  @db.VarChar(10)
  capital        String?  @db.VarChar(255)
  currency       String?  @db.VarChar(3)
  currencyName   String?  @db.VarChar(255)
  currencySymbol String?  @db.VarChar(10)
  tld            String?  @db.VarChar(10)
  native         String?  @db.VarChar(255)
  region         String?  @db.VarChar(255)
  subregion      String?  @db.VarChar(255)
  latitude       Decimal? @db.Decimal(10, 8)
  longitude      Decimal? @db.Decimal(11, 8)
  emoji          String?  @db.VarChar(10)
  hasStates      Boolean?
  states         states[]
}

model states {
  id        Int        @id
  countryId Int?
  name      String     @db.VarChar(255)
  stateCode String?    @db.VarChar(10)
  hasCities Boolean?
  latitude  Decimal?   @db.Decimal(10, 8)
  longitude Decimal?   @db.Decimal(11, 8)
  countries countries? @relation(fields: [countryId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([countryId], map: "states_countryid_index")
}
